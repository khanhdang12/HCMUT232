{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 1. \
def dist(lst, n):\
    return list(map(lambda x: (x, n), lst))\
2.\
def dist(lst, n):\
    if not lst:\
        return []\
    return [(lst[0], n)] + dist(lst[1:], n)     \
    \
3.\
def dist(lst, n):\
    return [(i, n) for i in lst]\
4.\
import functools\
\
def flatten(lst):\
    return functools.reduce(lambda acc, cur: acc + cur, lst, [])\
5.\
def flatten(lst):\
    return [j for i in lst for j in i]\
6.\
def flatten(lst):\
    if not lst:\
        return []\
    return lst[0] + flatten(lst[1:])\
7.\
def lessThan(lst, n):\
    return filter(lambda x: x < n, lst)\
8.\
def lessThan(lst, n):\
    if not lst:\
        return []\
    return [lst[0]] + lessThan(lst[1:], n) if lst[0] < n else lessThan(lst[1:], n)\
9.\
def lessThan(lst, n):\
    return [i for i in lst if i < n]\
10.\
def lstSquare(n):\
    if (n == 1):\
        return [1]\
    return lstSquare(n - 1) + [n*n]\
11.\
def lstSquare(n):\
    return [i*i for i in range(1, n + 1)]\
12.\
def lstSquare(n):\
    return list(map(lambda x: x * x, range(1, n + 1)))\
13.\
import functools\
\
def compose(f1, f2, *func):\
    def inner(x):\
        result = functools.reduce(lambda f, g: g(f), reversed(func), x)\
        return f1(f2(result))\
    return inner\
}