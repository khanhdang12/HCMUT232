{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 1.\
class TerminalCount(MPVisitor):\
\
    def visitProgram(self,ctx:MPParser.ProgramContext):\
        return 1 + self.visit(ctx.vardecls())\
\
    def visitVardecls(self,ctx:MPParser.VardeclsContext):\
        return self.visit(ctx.vardecl()) + self.visit(ctx.vardecltail())\
\
    def visitVardecltail(self,ctx:MPParser.VardecltailContext): \
        if ctx.vardecl():\
            return self.visit(ctx.vardecl()) + self.visit(ctx.vardecltail())\
        else:\
            return 0\
\
    def visitVardecl(self,ctx:MPParser.VardeclContext): \
        return 1 + self.visit(ctx.mptype()) + self.visit(ctx.ids())\
\
    def visitMptype(self,ctx:MPParser.MptypeContext):\
        return 1\
\
    def visitIds(self,ctx:MPParser.IdsContext):\
        if ctx.ids():\
            return 2 + self.visit(ctx.ids())\
        else:\
            return 1\
\
2.\
class Height(MPVisitor):\
\
    def visitProgram(self,ctx:MPParser.ProgramContext):\
        return 1 + self.visit(ctx.vardecls())\
\
    def visitVardecls(self,ctx:MPParser.VardeclsContext):\
        return 1 + max(self.visit(ctx.vardecl()), self.visit(ctx.vardecltail()))\
\
    def visitVardecltail(self,ctx:MPParser.VardecltailContext): \
        if ctx.vardecltail():\
            return 1 + max(self.visit(ctx.vardecl()), self.visit(ctx.vardecltail()))\
        else:\
            return 1\
\
    def visitVardecl(self,ctx:MPParser.VardeclContext): \
        return 1 + max(self.visit(ctx.mptype()), self.visit(ctx.ids()))\
\
    def visitMptype(self,ctx:MPParser.MptypeContext):\
        return 1\
\
    def visitIds(self,ctx:MPParser.IdsContext):\
        if ctx.ids():\
            return 1 + self.visit(ctx.ids())\
        else:\
            return 1\
3.\
class NonTerminalCount(MPVisitor):\
    def visitProgram(self,ctx:MPParser.ProgramContext):\
\
        return 1 + self.visit(ctx.vardecls())\
\
    def visitVardecls(self,ctx:MPParser.VardeclsContext):\
\
        return 1 + self.visit(ctx.vardecl()) + self.visit(ctx.vardecltail())\
\
    def visitVardecltail(self,ctx:MPParser.VardecltailContext): \
        if ctx.getChildCount() == 0:\
            return 1\
        return 1 + self.visit(ctx.vardecl()) + self.visit(ctx.vardecltail())\
\
    def visitVardecl(self,ctx:MPParser.VardeclContext): \
        return 1 + self.visit(ctx.mptype()) + self.visit(ctx.ids())\
\
    def visitMptype(self,ctx:MPParser.MptypeContext):\
        return 1\
\
    def visitIds(self,ctx:MPParser.IdsContext):\
        if ctx.getChildCount() == 1:\
            return 1\
        return 1 + self.visit(ctx.ids())\
\
4.\
class ASTGeneration(MPVisitor):\
\
    def visitProgram(self,ctx:MPParser.ProgramContext):\
        return Program(self.visit(ctx.vardecls()))\
\
    def visitVardecls(self,ctx:MPParser.VardeclsContext):\
        return self.visit(ctx.vardecl()) + self.visit(ctx.vardecltail())\
\
    def visitVardecltail(self,ctx:MPParser.VardecltailContext): \
        if ctx.vardecltail():\
            return self.visit(ctx.vardecl()) + self.visit(ctx.vardecltail())\
        else:\
            return []\
\
    def visitVardecl(self,ctx:MPParser.VardeclContext): \
        typ = self.visit(ctx.mptype())\
        return list(map(lambda x: VarDecl(x,typ),self.visit(ctx.ids())))\
\
    def visitMptype(self,ctx:MPParser.MptypeContext):\
        if ctx.INTTYPE():\
            return IntType()\
        else:\
            return FloatType()\
\
    def visitIds(self,ctx:MPParser.IdsContext):\
        if ctx.ids():\
            return [Id(ctx.ID().getText())] + self.visit(ctx.ids())\
        else:\
            return [Id(ctx.ID().getText())]\
\
5.\
from functools import reduce\
\
class ASTGeneration(MPVisitor):\
\
    def visitProgram(self,ctx:MPParser.ProgramContext):\
        return Program(reduce(lambda pre,curr: pre+self.visit(curr),ctx.vardecl(),[]))\
\
    def visitVardecl(self,ctx:MPParser.VardeclContext): \
        typ = self.visit(ctx.mptype())\
        return list(map(lambda x: VarDecl(x,typ), self.visit(ctx.ids())))\
\
    def visitMptype(self,ctx:MPParser.MptypeContext):\
        if ctx.INTTYPE():\
            return IntType()\
        else:\
            return FloatType()\
\
    def visitIds(self,ctx:MPParser.IdsContext):\
        return map(lambda x: Id(x.getText()),ctx.ID())\
}