1.
def dist(lst,n):
    return list(map(lambda x: (x,n), lst))

2.
def dist(lst, n):
    if len(lst) == 0:
        return []
    return [(lst[0],n)] + dist(lst[1:],n)

3.
def dist(lst, n):
    return [(x, n) for x in lst]

4.
from functools import reduce
def flatten(lst):
    return reduce(lambda acc,ele: acc+ele, lst, [])

5.
def flatten(lst):
    return [j for i in lst for j in i]

6.
def flatten(lst):
    if len(lst) == 0:
        return []
    return lst[0] + flatten(lst[1:])

7.
def lessThan(lst, n):
    return list(filter(lambda x: x < n, lst))

8.
def recur(lst, n):
    if len(lst) == 0:
        return []
    return [lst[0]] + recur(lst[1:],n) if lst[0] < n else recur(lst[1:],n)

9.
def comprehend(lst, n):    
    return [i for i in lst if i < n ]

def recur(n):
    if n == 1:
        return [1]
    return recur(n - 1) + [n**2] 

def lstSquare(n):
    # newlst = []
    # for i in range(1, n + 1):
    #     newlst += [i**2]
    # return newlst
    
    return [i**2 for i in range(1, n + 1)]
    
def highorder(n):
    return list(map(lambda x: x**2, range(1, n + 1)))
        

print(highorder(3))

from functools import reduce

def increase(x):
    return x+ 1
    
def square(x):
    return x**2

def compose(*lst_func):
    def inner(*args):
        return reduce(lambda prev, curr: curr(prev), lst_func[::-1], *args)
    
    return inner